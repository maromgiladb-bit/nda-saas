generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit_events {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String        @db.Uuid
  draft_id        String?       @db.Uuid
  actor_user_id   String?       @db.Uuid
  type            String
  ip              String?
  user_agent      String?
  meta            Json?
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  users           users?        @relation(fields: [actor_user_id], references: [id], onUpdate: NoAction)
  nda_drafts      nda_drafts?   @relation(fields: [draft_id], references: [id], onUpdate: NoAction)
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model memberships {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String        @db.Uuid
  user_id         String        @db.Uuid
  role            role?         @default(USER)
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, organization_id])
}

model nda_drafts {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String         @db.Uuid
  template_id     String         @db.Uuid
  created_by_id   String         @db.Uuid
  title           String?        @default("Untitled NDA")
  status          draft_status?  @default(DRAFT)
  data            Json?          @default("{}")
  preview_key     String?
  final_key       String?
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?      @default(now()) @db.Timestamptz(6)
  audit_events    audit_events[]
  users           users          @relation(fields: [created_by_id], references: [id], onUpdate: NoAction)
  organizations   organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  nda_templates   nda_templates  @relation(fields: [template_id], references: [id], onUpdate: NoAction)
  signers         signers[]
}

model nda_templates {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String        @db.Uuid
  name            String
  storage_key     String
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  nda_drafts      nda_drafts[]
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([organization_id, name])
}

model organizations {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  audit_events  audit_events[]
  memberships   memberships[]
  nda_drafts    nda_drafts[]
  nda_templates nda_templates[]
}

model sign_requests {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  signer_id   String    @db.Uuid
  token       String    @unique
  expires_at  DateTime  @db.Timestamptz(6)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  consumed_at DateTime? @db.Timestamptz(6)
  signers     signers   @relation(fields: [signer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model signers {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  draft_id      String          @db.Uuid
  email         String          @db.Citext
  role          String
  status        signer_status?  @default(PENDING)
  signed_at     DateTime?       @db.Timestamptz(6)
  user_id       String?         @db.Uuid
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  sign_requests sign_requests[]
  nda_drafts    nda_drafts      @relation(fields: [draft_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id  String         @unique
  email        String         @unique @db.Citext
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  audit_events audit_events[]
  memberships  memberships[]
  nda_drafts   nda_drafts[]
  signers      signers[]
}

enum draft_status {
  DRAFT
  SENT
  SIGNED
  VOID
}

enum role {
  OWNER
  ADMIN
  USER
  EXTERNAL
}

enum signer_status {
  PENDING
  VIEWED
  SIGNED
  DECLINED
  EXPIRED
}
